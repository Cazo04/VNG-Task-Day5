# API Tests for Storage Service
# This file contains HTTP requests to test all endpoints
# Make sure your Spring Boot application is running on localhost:8080

###

# ============== AUTHOR TESTS ==============

### 1. Create Author - Test 1
POST http://localhost:8080/api/storage/authors
Content-Type: application/json

{
    "name": "J.K. Rowling"
}

###

### 2. Create Author - Test 2
POST http://localhost:8080/api/storage/authors
Content-Type: application/json

{
    "name": "George R.R. Martin"
}

###

### 3. Create Author - Test 3
POST http://localhost:8080/api/storage/authors
Content-Type: application/json

{
    "name": "Stephen King"
}

###

### 4. Get All Authors
GET http://localhost:8080/api/storage/authors

###

### 5. Get Author by ID (Replace with actual UUID from previous responses)
GET http://localhost:8080/api/storage/authors/550e8400-e29b-41d4-a716-446655440000

###

### 6. Update Author (Replace with actual UUID)
PUT http://localhost:8080/api/storage/authors/550e8400-e29b-41d4-a716-446655440000
Content-Type: application/json

{
    "name": "J.K. Rowling (Updated)"
}

###

### 7. Delete Author (Replace with actual UUID)
DELETE http://localhost:8080/api/storage/authors/550e8400-e29b-41d4-a716-446655440000

###

# ============== BOOK TESTS ==============

### 8. Create Book - Test 1 (Replace authorId with actual UUID from author creation)
POST http://localhost:8080/api/storage/books
Content-Type: application/json

{
    "title": "Harry Potter and the Philosopher's Stone",
    "authorId": "5e142005-e19e-43b1-87a6-bc0e4ad1814a"
}

###

### 9. Create Book - Test 2 (Replace authorId with actual UUID)
POST http://localhost:8080/api/storage/books
Content-Type: application/json

{
    "title": "A Game of Thrones",
    "authorId": "af3704cd-2384-47cc-b40f-6533d4207f59"
}

###

### 10. Create Book - Test 3 (Replace authorId with actual UUID)
POST http://localhost:8080/api/storage/books
Content-Type: application/json

{
    "title": "The Shining",
    "authorId": "550e8400-e29b-41d4-a716-446655440002"
}

###

### 11. Get All Books
GET http://localhost:8080/api/storage/books

###

### 12. Get Book by ID (Replace with actual book ID from previous responses)
GET http://localhost:8080/api/storage/books/1

###

### 13. Update Book (Replace with actual book ID)
PUT http://localhost:8080/api/storage/books/1
Content-Type: application/json

{
    "title": "Harry Potter and the Philosopher's Stone (Updated)"
}

###

### 14. Delete Book (Replace with actual book ID)
DELETE http://localhost:8080/api/storage/books/1

###

# ============== ERROR TESTS ==============

### 15. Test with Invalid Author ID
GET http://localhost:8080/api/storage/authors/invalid-uuid

###

### 16. Test with Non-existent Author ID
GET http://localhost:8080/api/storage/authors/00000000-0000-0000-0000-000000000000

###

### 17. Test with Non-existent Book ID
GET http://localhost:8080/api/storage/books/999

###

### 18. Create Book with Invalid Author ID
POST http://localhost:8080/api/storage/books
Content-Type: application/json

{
    "title": "Test Book",
    "authorId": "00000000-0000-0000-0000-000000000000"
}

###

### 19. Create Author with Missing Name
POST http://localhost:8080/api/storage/authors
Content-Type: application/json

{
}

###

### 20. Create Book with Missing Title
POST http://localhost:8080/api/storage/books
Content-Type: application/json

{
    "authorId": "550e8400-e29b-41d4-a716-446655440000"
}

###

# ============== USAGE INSTRUCTIONS ==============

# Instructions for testing:
# 1. Start your Spring Boot application: mvn spring-boot:run
# 2. Use VS Code REST Client extension or similar HTTP client
# 3. Execute requests in order for proper testing flow
# 4. Copy actual UUIDs and IDs from responses to replace placeholder values
# 5. The first few requests create data, then you can test retrieval, updates, and deletions

# Expected Flow:
# - Create 3 authors (tests 1-3)
# - Get all authors (test 4) - copy UUIDs for later tests
# - Test individual author retrieval (test 5)
# - Update an author (test 6)
# - Create 3 books using the author UUIDs (tests 8-10)
# - Get all books (test 11) - copy book IDs for later tests
# - Test individual book retrieval (test 12)
# - Update a book (test 13)
# - Test error scenarios (tests 15-20)
# - Clean up by deleting books and authors (tests 14, 7)

###